<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yuxuanの博客</title>
  
  <subtitle>yuxuanの博客</subtitle>
  <link href="https://fyxemmmm.github.io/atom.xml" rel="self"/>
  
  <link href="https://fyxemmmm.github.io/"/>
  <updated>2022-01-02T15:18:16.595Z</updated>
  <id>https://fyxemmmm.github.io/</id>
  
  <author>
    <name>yuxuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tcp为什么要分片?</title>
    <link href="https://fyxemmmm.github.io/2021/12/27/tcp-wei-shi-me-yao-fen-pian/"/>
    <id>https://fyxemmmm.github.io/2021/12/27/tcp-wei-shi-me-yao-fen-pian/</id>
    <published>2021-12-27T14:47:58.000Z</published>
    <updated>2022-01-02T15:18:16.595Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.fyxemmmm.cn/blog/images/dir1/tcp03-0.jpg&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是TCP分段和IP分片&quot;&gt;&lt;a href=&quot;#什么是TCP分段和IP分片&quot;</summary>
        
      
    
    
    
    <category term="协议" scheme="https://fyxemmmm.github.io/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="tcp" scheme="https://fyxemmmm.github.io/tags/tcp/"/>
    
    <category term="协议" scheme="https://fyxemmmm.github.io/tags/%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="操作系统" scheme="https://fyxemmmm.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>send出去, 数据就发送了么?</title>
    <link href="https://fyxemmmm.github.io/2021/12/21/send-chu-qu-shu-ju-jiu-fa-song-liao-me/"/>
    <id>https://fyxemmmm.github.io/2021/12/21/send-chu-qu-shu-ju-jiu-fa-song-liao-me/</id>
    <published>2021-12-21T14:47:58.000Z</published>
    <updated>2022-01-02T14:51:29.431Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;代码执行send成功后，数据就发出去了吗？&lt;/p&gt;
&lt;p&gt;回答这个问题之前，需要了解什么是&lt;strong&gt;Socket 缓冲区&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Socket-缓冲区&quot;&gt;&lt;a href=&quot;#Socket-缓冲区&quot;</summary>
        
      
    
    
    
    <category term="协议" scheme="https://fyxemmmm.github.io/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="tcp" scheme="https://fyxemmmm.github.io/tags/tcp/"/>
    
    <category term="协议" scheme="https://fyxemmmm.github.io/tags/%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="操作系统" scheme="https://fyxemmmm.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>没有accept, 是否能建立tcp?</title>
    <link href="https://fyxemmmm.github.io/2021/12/15/mei-you-accept-neng-jian-li-tcp-me/"/>
    <id>https://fyxemmmm.github.io/2021/12/15/mei-you-accept-neng-jian-li-tcp-me/</id>
    <published>2021-12-15T14:27:23.000Z</published>
    <updated>2022-01-02T14:50:18.506Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.fyxemmmm.cn/blog/images/dir1/tcp01-0.gif&quot;</summary>
        
      
    
    
    
    <category term="协议" scheme="https://fyxemmmm.github.io/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="tcp" scheme="https://fyxemmmm.github.io/tags/tcp/"/>
    
    <category term="协议" scheme="https://fyxemmmm.github.io/tags/%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="操作系统" scheme="https://fyxemmmm.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Golang字符串底层原理</title>
    <link href="https://fyxemmmm.github.io/2021/12/04/zi-fu-chuan-di-ceng-yuan-li/"/>
    <id>https://fyxemmmm.github.io/2021/12/04/zi-fu-chuan-di-ceng-yuan-li/</id>
    <published>2021-12-04T03:12:30.000Z</published>
    <updated>2021-12-04T09:39:04.891Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;string 是 Go 语言的基础类型，在实际项目中针对字符串的各种操作使用频率也较高。本文就介绍一下在使用 string 时容易犯的一些错误以及如何避免。&lt;/p&gt;
&lt;h4 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="golang" scheme="https://fyxemmmm.github.io/categories/golang/"/>
    
    
    <category term="utf-8" scheme="https://fyxemmmm.github.io/tags/utf-8/"/>
    
    <category term="字符串" scheme="https://fyxemmmm.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>线程间的资源共享</title>
    <link href="https://fyxemmmm.github.io/2021/11/27/xian-cheng-gong-xiang-liao-shi-me/"/>
    <id>https://fyxemmmm.github.io/2021/11/27/xian-cheng-gong-xiang-liao-shi-me/</id>
    <published>2021-11-27T09:35:36.000Z</published>
    <updated>2021-12-04T10:29:11.576Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;进程和线程这两个话题是程序员绕不开的，操作系统提供的这两个抽象概念实在是太重要了。&lt;/p&gt;
&lt;p&gt;关于进程和线程有一个&lt;strong&gt;极其经典&lt;/strong&gt;的问题，那就是进程和线程的区别是什么？相信很多同学对答案似懂非懂。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;记住了不一定真懂</summary>
        
      
    
    
    
    <category term="操作系统" scheme="https://fyxemmmm.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="线程" scheme="https://fyxemmmm.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="共享资源" scheme="https://fyxemmmm.github.io/tags/%E5%85%B1%E4%BA%AB%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>进程、线程切换的区别</title>
    <link href="https://fyxemmmm.github.io/2021/11/20/jin-cheng-xian-cheng-qie-huan-qu-bie/"/>
    <id>https://fyxemmmm.github.io/2021/11/20/jin-cheng-xian-cheng-qie-huan-qu-bie/</id>
    <published>2021-11-20T09:14:32.000Z</published>
    <updated>2021-12-04T09:17:24.717Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;注意这个题目问的是进程&lt;strong&gt;切换&lt;/strong&gt;与线程&lt;strong&gt;切换&lt;/strong&gt;的区别，不是进程与线程的区别。当然这里的&lt;strong&gt;线程指的是同一个进程中的线程&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这个问题能很好的考察面试者对进程和线程的理解深度，</summary>
        
      
    
    
    
    <category term="操作系统" scheme="https://fyxemmmm.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="线程" scheme="https://fyxemmmm.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="进程" scheme="https://fyxemmmm.github.io/tags/%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 tcp rst 标志位</title>
    <link href="https://fyxemmmm.github.io/2021/11/14/tcp-rst/"/>
    <id>https://fyxemmmm.github.io/2021/11/14/tcp-rst/</id>
    <published>2021-11-14T06:49:06.000Z</published>
    <updated>2021-11-14T06:57:22.906Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;什么是RST&quot;&gt;&lt;a href=&quot;#什么是RST&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="协议" scheme="https://fyxemmmm.github.io/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="tcp" scheme="https://fyxemmmm.github.io/tags/tcp/"/>
    
    <category term="协议" scheme="https://fyxemmmm.github.io/tags/%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="操作系统" scheme="https://fyxemmmm.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>异地多活 架构设计</title>
    <link href="https://fyxemmmm.github.io/2021/11/09/yi-di-duo-huo/"/>
    <id>https://fyxemmmm.github.io/2021/11/09/yi-di-duo-huo/</id>
    <published>2021-11-09T11:49:06.000Z</published>
    <updated>2021-11-14T06:34:01.083Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;搞懂异地多活，看这篇就够了&quot;&gt;&lt;a href=&quot;#搞懂异地多活，看这篇就够了&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="架构" scheme="https://fyxemmmm.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="架构" scheme="https://fyxemmmm.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="异地多活" scheme="https://fyxemmmm.github.io/tags/%E5%BC%82%E5%9C%B0%E5%A4%9A%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>redis 性能优化</title>
    <link href="https://fyxemmmm.github.io/2021/11/01/redis-xing-neng-wen-ti-fen-xi/"/>
    <id>https://fyxemmmm.github.io/2021/11/01/redis-xing-neng-wen-ti-fen-xi/</id>
    <published>2021-11-01T11:49:06.000Z</published>
    <updated>2021-11-14T06:18:20.108Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Redis慢的原因-amp-redis性能优化&quot;&gt;&lt;a href=&quot;#Redis慢的原因-amp-redis性能优化&quot; class=&quot;headerlink&quot; title=&quot;Redis慢的原因 &amp;amp; redis性能优化&quot;&gt;&lt;/a&gt;Redis慢的原因</summary>
        
      
    
    
    
    <category term="redis" scheme="https://fyxemmmm.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://fyxemmmm.github.io/tags/redis/"/>
    
    <category term="性能优化" scheme="https://fyxemmmm.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>limit &amp; offset 为什么会慢</title>
    <link href="https://fyxemmmm.github.io/2021/10/19/mysql-fen-ye-cha-xun/"/>
    <id>https://fyxemmmm.github.io/2021/10/19/mysql-fen-ye-cha-xun/</id>
    <published>2021-10-19T11:49:06.000Z</published>
    <updated>2021-10-20T05:58:20.029Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;从一个问题说起&quot;&gt;&lt;a href=&quot;#从一个问题说起&quot; class=&quot;headerlink&quot; title=&quot;从一个问题说起&quot;&gt;&lt;/a&gt;从一个问题说起&lt;/h2&gt;&lt;p&gt;五年前发现分页场景下，mysql请求速度非常慢。数据量只有10w的情况下，select xx</summary>
        
      
    
    
    
    <category term="mysql" scheme="https://fyxemmmm.github.io/categories/mysql/"/>
    
    
    <category term="limit" scheme="https://fyxemmmm.github.io/tags/limit/"/>
    
    <category term="offset" scheme="https://fyxemmmm.github.io/tags/offset/"/>
    
    <category term="分页" scheme="https://fyxemmmm.github.io/tags/%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>简单说说「跨域请求」</title>
    <link href="https://fyxemmmm.github.io/2021/10/14/cors/"/>
    <id>https://fyxemmmm.github.io/2021/10/14/cors/</id>
    <published>2021-10-14T09:48:27.000Z</published>
    <updated>2021-10-20T05:58:36.656Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;“前端如何解决跨域问题？” 这个是前段在知乎看到的一个提问，这几乎是做前端都会遇到的一个问题，产生的情况可能会很多，解决一个问题还是要先了解下为什么会产生这样问题，学习最好的方法就是结合一些实际的案例来学习，理解和掌握也会更加的深刻，本文结合 Node.js 写一些</summary>
        
      
    
    
    
    <category term="协议" scheme="https://fyxemmmm.github.io/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="http" scheme="https://fyxemmmm.github.io/tags/http/"/>
    
    <category term="cors" scheme="https://fyxemmmm.github.io/tags/cors/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes nfs-provider</title>
    <link href="https://fyxemmmm.github.io/2021/10/09/k8s-nfs-provider/"/>
    <id>https://fyxemmmm.github.io/2021/10/09/k8s-nfs-provider/</id>
    <published>2021-10-09T09:38:26.000Z</published>
    <updated>2021-10-23T08:08:56.488Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;一、什么是StorageClass&quot;&gt;&lt;a href=&quot;#一、什么是StorageClass&quot; class=&quot;headerlink&quot; title=&quot;一、什么是StorageClass&quot;&gt;&lt;/a&gt;一、什么是StorageClass&lt;/h3&gt;&lt;pre</summary>
        
      
    
    
    
    <category term="kubernetes" scheme="https://fyxemmmm.github.io/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://fyxemmmm.github.io/tags/kubernetes/"/>
    
    <category term="StorageClass" scheme="https://fyxemmmm.github.io/tags/StorageClass/"/>
    
  </entry>
  
  <entry>
    <title>golang pprof 实操</title>
    <link href="https://fyxemmmm.github.io/2021/10/03/pprof/"/>
    <id>https://fyxemmmm.github.io/2021/10/03/pprof/</id>
    <published>2021-10-03T14:24:01.000Z</published>
    <updated>2021-10-03T14:36:58.423Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;pprof是一个好工具，但掌握好工具的正确用法，才能发挥好工具的威力，不然就算你手里有屠龙刀，也成不了天下第一，本文就是带你用pprof定位内存泄露问题。&lt;/p&gt;
&lt;p&gt;关于Go的内存泄露有这么一句话不知道你听过没有：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;10次内存泄露</summary>
        
      
    
    
    
    <category term="golang" scheme="https://fyxemmmm.github.io/categories/golang/"/>
    
    
    <category term="pprof" scheme="https://fyxemmmm.github.io/tags/pprof/"/>
    
    <category term="性能诊断" scheme="https://fyxemmmm.github.io/tags/%E6%80%A7%E8%83%BD%E8%AF%8A%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>Linux syscall 原理</title>
    <link href="https://fyxemmmm.github.io/2021/09/30/linux-syscall-yuan-li/"/>
    <id>https://fyxemmmm.github.io/2021/09/30/linux-syscall-yuan-li/</id>
    <published>2021-09-30T14:00:45.000Z</published>
    <updated>2021-10-03T14:34:26.928Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;一、Syscall意义&quot;&gt;&lt;a href=&quot;#一、Syscall意义&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="操作系统" scheme="https://fyxemmmm.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="系统调用" scheme="https://fyxemmmm.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Rust 核心概念</title>
    <link href="https://fyxemmmm.github.io/2021/09/26/rust-suo-you-quan/"/>
    <id>https://fyxemmmm.github.io/2021/09/26/rust-suo-you-quan/</id>
    <published>2021-09-26T13:44:34.000Z</published>
    <updated>2021-10-19T10:50:37.658Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;1-前言概述&quot;&gt;&lt;a href=&quot;#1-前言概述&quot; class=&quot;headerlink&quot; title=&quot;1. 前言概述&quot;&gt;&lt;/a&gt;1.</summary>
        
      
    
    
    
    <category term="rust" scheme="https://fyxemmmm.github.io/categories/rust/"/>
    
    
    <category term="所有权" scheme="https://fyxemmmm.github.io/tags/%E6%89%80%E6%9C%89%E6%9D%83/"/>
    
    <category term="借用" scheme="https://fyxemmmm.github.io/tags/%E5%80%9F%E7%94%A8/"/>
    
    <category term="引用" scheme="https://fyxemmmm.github.io/tags/%E5%BC%95%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>golang 安全计数</title>
    <link href="https://fyxemmmm.github.io/2021/09/19/go-yu-yan-shi-xian-an-quan-ji-shu-de-ruo-gan-chong-fang-fa/"/>
    <id>https://fyxemmmm.github.io/2021/09/19/go-yu-yan-shi-xian-an-quan-ji-shu-de-ruo-gan-chong-fang-fa/</id>
    <published>2021-09-19T05:04:54.000Z</published>
    <updated>2021-09-19T05:07:18.416Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;本文是一篇如何用 goroutine-safe 的方式实现计数器的方法汇总。&lt;/p&gt;
&lt;h3 id=&quot;不要这样做&quot;&gt;&lt;a href=&quot;#不要这样做&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="golang" scheme="https://fyxemmmm.github.io/categories/golang/"/>
    
    
    <category term="安全计数" scheme="https://fyxemmmm.github.io/tags/%E5%AE%89%E5%85%A8%E8%AE%A1%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>mysql 索引下推</title>
    <link href="https://fyxemmmm.github.io/2021/09/15/mysql-suo-yin-xia-tui/"/>
    <id>https://fyxemmmm.github.io/2021/09/15/mysql-suo-yin-xia-tui/</id>
    <published>2021-09-15T04:59:58.000Z</published>
    <updated>2021-09-19T05:02:28.552Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;strong&gt;回表操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于数据库来说，只要涉及到索引，必然绕不过去回表操作。当然这也是我们今天所讲内容的前置基础。&lt;/p&gt;
&lt;p&gt;说到回表，我们需要从索引开始说起。别担心，不会长篇大论，这里只是简单讲下主键索引与普通索引，目的是让大家对回</summary>
        
      
    
    
    
    <category term="mysql" scheme="https://fyxemmmm.github.io/categories/mysql/"/>
    
    
    <category term="索引下推" scheme="https://fyxemmmm.github.io/tags/%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A8/"/>
    
  </entry>
  
  <entry>
    <title>golang string与bytes的转换</title>
    <link href="https://fyxemmmm.github.io/2021/09/11/golang-string-bytes-mi-mi/"/>
    <id>https://fyxemmmm.github.io/2021/09/11/golang-string-bytes-mi-mi/</id>
    <published>2021-09-11T06:26:56.000Z</published>
    <updated>2021-09-19T04:36:51.194Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;byte类型&quot;&gt;&lt;a href=&quot;#byte类型&quot; class=&quot;headerlink&quot; title=&quot;byte类型&quot;&gt;&lt;/a&gt;byte类型&lt;/h2&gt;&lt;p&gt;我们看一下官方对&lt;code&gt;byte&lt;/code&gt;的定义：&lt;/p&gt;
&lt;pre</summary>
        
      
    
    
    
    <category term="golang" scheme="https://fyxemmmm.github.io/categories/golang/"/>
    
    
    <category term="golang" scheme="https://fyxemmmm.github.io/tags/golang/"/>
    
    <category term="string" scheme="https://fyxemmmm.github.io/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>Linux の 文件系统</title>
    <link href="https://fyxemmmm.github.io/2021/09/09/linux-wen-jian-xi-tong-mi-mi/"/>
    <id>https://fyxemmmm.github.io/2021/09/09/linux-wen-jian-xi-tong-mi-mi/</id>
    <published>2021-09-09T15:50:09.000Z</published>
    <updated>2021-09-09T16:11:55.610Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;文件系统&quot;&gt;&lt;a href=&quot;#文件系统&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="操作系统" scheme="https://fyxemmmm.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="操作系统" scheme="https://fyxemmmm.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="文件系统" scheme="https://fyxemmmm.github.io/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="inode" scheme="https://fyxemmmm.github.io/tags/inode/"/>
    
  </entry>
  
  <entry>
    <title>图解「进程间通讯」</title>
    <link href="https://fyxemmmm.github.io/2021/09/07/jie-du-jin-cheng-jian-tong-xun/"/>
    <id>https://fyxemmmm.github.io/2021/09/07/jie-du-jin-cheng-jian-tong-xun/</id>
    <published>2021-09-07T15:37:44.000Z</published>
    <updated>2021-09-19T04:50:15.358Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;开场小故事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    <category term="操作系统" scheme="https://fyxemmmm.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="进程" scheme="https://fyxemmmm.github.io/tags/%E8%BF%9B%E7%A8%8B/"/>
    
    <category term="通讯" scheme="https://fyxemmmm.github.io/tags/%E9%80%9A%E8%AE%AF/"/>
    
  </entry>
  
</feed>
