<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yuxuanの博客</title>
  
  <subtitle>yuxuanの博客</subtitle>
  <link href="https://fyxemmmm.github.io/atom.xml" rel="self"/>
  
  <link href="https://fyxemmmm.github.io/"/>
  <updated>2022-02-19T17:14:08.004Z</updated>
  <id>https://fyxemmmm.github.io/</id>
  
  <author>
    <name>yuxuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>本机网络IO, 性能提升方法</title>
    <link href="https://fyxemmmm.github.io/2022/02/20/ben-ji-wang-luo-io/"/>
    <id>https://fyxemmmm.github.io/2022/02/20/ben-ji-wang-luo-io/</id>
    <published>2022-02-19T17:12:26.000Z</published>
    <updated>2022-02-19T17:14:08.004Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;今天来看一种本机网络 IO 通信方式 – Unix Domain Socket。看看这种方式在性能开销上和基于 127.0.0.1 的本机网络 IO 有没有啥差异呢。&lt;/p&gt;
&lt;p&gt;本文中，我们将分析 Unix Domain Socket</summary>
        
      
    
    
    
    <category term="操作系统" scheme="https://fyxemmmm.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="网络IO" scheme="https://fyxemmmm.github.io/tags/%E7%BD%91%E7%BB%9CIO/"/>
    
  </entry>
  
  <entry>
    <title>计算机时间到底是怎么来的</title>
    <link href="https://fyxemmmm.github.io/2022/02/11/ji-suan-ji-shi-jian-dao-di-shi-zen-me-lai-de/"/>
    <id>https://fyxemmmm.github.io/2022/02/11/ji-suan-ji-shi-jian-dao-di-shi-zen-me-lai-de/</id>
    <published>2022-02-10T17:01:49.000Z</published>
    <updated>2022-02-19T17:04:16.056Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;时间为什么总是走“不准”？&quot;&gt;&lt;a href=&quot;#时间为什么总是走“不准”？&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="计算机" scheme="https://fyxemmmm.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="计算机时间" scheme="https://fyxemmmm.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>连接一个 IP 不存在的主机时，握手过程是怎么样的</title>
    <link href="https://fyxemmmm.github.io/2022/02/02/lian-jie-yi-ge-ip-bu-cun-zai-de-zhu-ji-shi-wo-shou-guo-cheng/"/>
    <id>https://fyxemmmm.github.io/2022/02/02/lian-jie-yi-ge-ip-bu-cun-zai-de-zhu-ji-shi-wo-shou-guo-cheng/</id>
    <published>2022-02-01T16:47:42.000Z</published>
    <updated>2022-02-19T16:52:22.434Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;正常情况的握手过程是怎么样的&quot;&gt;&lt;a href=&quot;#正常情况的握手过程是怎么样的&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="协议" scheme="https://fyxemmmm.github.io/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="tcp" scheme="https://fyxemmmm.github.io/tags/tcp/"/>
    
    <category term="协议" scheme="https://fyxemmmm.github.io/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>找寻两个文件的公共url</title>
    <link href="https://fyxemmmm.github.io/2022/01/23/liang-ge-wen-jian-de-gong-gong-url/"/>
    <id>https://fyxemmmm.github.io/2022/01/23/liang-ge-wen-jian-de-gong-gong-url/</id>
    <published>2022-01-23T03:44:20.000Z</published>
    <updated>2022-01-22T03:46:42.967Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;今天，我们来看一道非常经典的面试题目。&lt;/p&gt;
&lt;p&gt;A文件有32亿个url链接，B文件有64亿个url链接，求A和B中的公共url链接。&lt;/p&gt;
&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    <category term="通用" scheme="https://fyxemmmm.github.io/categories/%E9%80%9A%E7%94%A8/"/>
    
    
    <category term="公共url" scheme="https://fyxemmmm.github.io/tags/%E5%85%AC%E5%85%B1url/"/>
    
    <category term="分治" scheme="https://fyxemmmm.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>高性能短链接服务</title>
    <link href="https://fyxemmmm.github.io/2022/01/18/gao-xing-neng-duan-lian-jie-fu-wu/"/>
    <id>https://fyxemmmm.github.io/2022/01/18/gao-xing-neng-duan-lian-jie-fu-wu/</id>
    <published>2022-01-18T03:37:20.000Z</published>
    <updated>2022-01-22T03:38:58.790Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;前-言&quot;&gt;&lt;a href=&quot;#前-言&quot; class=&quot;headerlink&quot; title=&quot;前 言&quot;&gt;&lt;/a&gt;前</summary>
        
      
    
    
    
    <category term="短链接" scheme="https://fyxemmmm.github.io/categories/%E7%9F%AD%E9%93%BE%E6%8E%A5/"/>
    
    
    <category term="短链接" scheme="https://fyxemmmm.github.io/tags/%E7%9F%AD%E9%93%BE%E6%8E%A5/"/>
    
    <category term="哈希" scheme="https://fyxemmmm.github.io/tags/%E5%93%88%E5%B8%8C/"/>
    
    <category term="算法" scheme="https://fyxemmmm.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>微信扫码原理</title>
    <link href="https://fyxemmmm.github.io/2022/01/12/wei-xin-sao-ma-yuan-li/"/>
    <id>https://fyxemmmm.github.io/2022/01/12/wei-xin-sao-ma-yuan-li/</id>
    <published>2022-01-12T03:28:46.000Z</published>
    <updated>2022-01-22T03:30:18.447Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;可能有些同学对于付款码支付这个听起来很陌生，其实这个功能我们可能每天都在被使用。&lt;/p&gt;
&lt;p&gt;像我们在便利店买个早饭，最后结账时，使用支付宝/微信支付付款。收银员会让我们展示支付宝/微信付款码，然后使用扫码枪获取此码，最后上送给微信/支付宝服务端完成一次扣款。&lt;/p&gt;
&lt;</summary>
        
      
    
    
    
    <category term="支付" scheme="https://fyxemmmm.github.io/categories/%E6%94%AF%E4%BB%98/"/>
    
    
    <category term="微信扫码" scheme="https://fyxemmmm.github.io/tags/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>百亿数据分表</title>
    <link href="https://fyxemmmm.github.io/2022/01/05/bai-yi-shu-ju-fen-biao/"/>
    <id>https://fyxemmmm.github.io/2022/01/05/bai-yi-shu-ju-fen-biao/</id>
    <published>2022-01-05T03:18:10.000Z</published>
    <updated>2022-01-22T03:29:12.955Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;strong&gt;当业务规模达到一定规模之后&lt;/strong&gt;，像淘宝日订单量在5000万单以上，美团3000万单以上。数据库面对海量的数据压力，分库分表就是必须进行的操作了。而分库分表之后一些常规的查询可能都会产生问题，最常见的就是比如分页查询的问题。一般我们把分表的字段称</summary>
        
      
    
    
    
    <category term="数据库" scheme="https://fyxemmmm.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="分片" scheme="https://fyxemmmm.github.io/tags/%E5%88%86%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>tcp为什么要分片?</title>
    <link href="https://fyxemmmm.github.io/2021/12/27/tcp-wei-shi-me-yao-fen-pian/"/>
    <id>https://fyxemmmm.github.io/2021/12/27/tcp-wei-shi-me-yao-fen-pian/</id>
    <published>2021-12-27T14:47:58.000Z</published>
    <updated>2022-01-02T15:18:16.595Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.fyxemmmm.cn/blog/images/dir1/tcp03-0.jpg&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是TCP分段和IP分片&quot;&gt;&lt;a href=&quot;#什么是TCP分段和IP分片&quot;</summary>
        
      
    
    
    
    <category term="协议" scheme="https://fyxemmmm.github.io/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="tcp" scheme="https://fyxemmmm.github.io/tags/tcp/"/>
    
    <category term="协议" scheme="https://fyxemmmm.github.io/tags/%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="操作系统" scheme="https://fyxemmmm.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>send出去, 数据就发送了么?</title>
    <link href="https://fyxemmmm.github.io/2021/12/21/send-chu-qu-shu-ju-jiu-fa-song-liao-me/"/>
    <id>https://fyxemmmm.github.io/2021/12/21/send-chu-qu-shu-ju-jiu-fa-song-liao-me/</id>
    <published>2021-12-21T14:47:58.000Z</published>
    <updated>2022-01-22T03:08:28.025Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;代码执行send成功后，数据就发出去了吗？&lt;/p&gt;
&lt;p&gt;回答这个问题之前，需要了解什么是&lt;strong&gt;Socket 缓冲区&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Socket-缓冲区&quot;&gt;&lt;a href=&quot;#Socket-缓冲区&quot;</summary>
        
      
    
    
    
    <category term="协议" scheme="https://fyxemmmm.github.io/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="tcp" scheme="https://fyxemmmm.github.io/tags/tcp/"/>
    
    <category term="协议" scheme="https://fyxemmmm.github.io/tags/%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="操作系统" scheme="https://fyxemmmm.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>没有accept, 是否能建立tcp?</title>
    <link href="https://fyxemmmm.github.io/2021/12/15/mei-you-accept-neng-jian-li-tcp-me/"/>
    <id>https://fyxemmmm.github.io/2021/12/15/mei-you-accept-neng-jian-li-tcp-me/</id>
    <published>2021-12-15T14:27:23.000Z</published>
    <updated>2022-01-02T14:50:18.506Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://image.fyxemmmm.cn/blog/images/dir1/tcp01-0.gif&quot;</summary>
        
      
    
    
    
    <category term="协议" scheme="https://fyxemmmm.github.io/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="tcp" scheme="https://fyxemmmm.github.io/tags/tcp/"/>
    
    <category term="协议" scheme="https://fyxemmmm.github.io/tags/%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="操作系统" scheme="https://fyxemmmm.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Golang字符串底层原理</title>
    <link href="https://fyxemmmm.github.io/2021/12/04/zi-fu-chuan-di-ceng-yuan-li/"/>
    <id>https://fyxemmmm.github.io/2021/12/04/zi-fu-chuan-di-ceng-yuan-li/</id>
    <published>2021-12-04T03:12:30.000Z</published>
    <updated>2022-01-02T15:21:50.493Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;string 是 Go 语言的基础类型，在实际项目中针对字符串的各种操作使用频率也较高。本文就介绍一下在使用 string 时容易犯的一些错误以及如何避免。&lt;/p&gt;
&lt;h4 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="golang" scheme="https://fyxemmmm.github.io/categories/golang/"/>
    
    
    <category term="utf-8" scheme="https://fyxemmmm.github.io/tags/utf-8/"/>
    
    <category term="字符串" scheme="https://fyxemmmm.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>线程间的资源共享</title>
    <link href="https://fyxemmmm.github.io/2021/11/27/xian-cheng-gong-xiang-liao-shi-me/"/>
    <id>https://fyxemmmm.github.io/2021/11/27/xian-cheng-gong-xiang-liao-shi-me/</id>
    <published>2021-11-27T09:35:36.000Z</published>
    <updated>2022-01-02T15:22:47.485Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;进程和线程这两个话题是程序员绕不开的，操作系统提供的这两个抽象概念实在是太重要了。&lt;/p&gt;
&lt;p&gt;关于进程和线程有一个&lt;strong&gt;极其经典&lt;/strong&gt;的问题，那就是进程和线程的区别是什么？相信很多同学对答案似懂非懂。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;记住了不一定真懂</summary>
        
      
    
    
    
    <category term="操作系统" scheme="https://fyxemmmm.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="线程" scheme="https://fyxemmmm.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="共享资源" scheme="https://fyxemmmm.github.io/tags/%E5%85%B1%E4%BA%AB%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>进程、线程切换的区别</title>
    <link href="https://fyxemmmm.github.io/2021/11/20/jin-cheng-xian-cheng-qie-huan-qu-bie/"/>
    <id>https://fyxemmmm.github.io/2021/11/20/jin-cheng-xian-cheng-qie-huan-qu-bie/</id>
    <published>2021-11-20T09:14:32.000Z</published>
    <updated>2021-12-04T09:17:24.717Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;注意这个题目问的是进程&lt;strong&gt;切换&lt;/strong&gt;与线程&lt;strong&gt;切换&lt;/strong&gt;的区别，不是进程与线程的区别。当然这里的&lt;strong&gt;线程指的是同一个进程中的线程&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这个问题能很好的考察面试者对进程和线程的理解深度，</summary>
        
      
    
    
    
    <category term="操作系统" scheme="https://fyxemmmm.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="线程" scheme="https://fyxemmmm.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="进程" scheme="https://fyxemmmm.github.io/tags/%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 tcp rst 标志位</title>
    <link href="https://fyxemmmm.github.io/2021/11/14/tcp-rst/"/>
    <id>https://fyxemmmm.github.io/2021/11/14/tcp-rst/</id>
    <published>2021-11-14T06:49:06.000Z</published>
    <updated>2021-11-14T06:57:22.906Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;什么是RST&quot;&gt;&lt;a href=&quot;#什么是RST&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="协议" scheme="https://fyxemmmm.github.io/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="tcp" scheme="https://fyxemmmm.github.io/tags/tcp/"/>
    
    <category term="协议" scheme="https://fyxemmmm.github.io/tags/%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="操作系统" scheme="https://fyxemmmm.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>异地多活 架构设计</title>
    <link href="https://fyxemmmm.github.io/2021/11/09/yi-di-duo-huo/"/>
    <id>https://fyxemmmm.github.io/2021/11/09/yi-di-duo-huo/</id>
    <published>2021-11-09T11:49:06.000Z</published>
    <updated>2021-11-14T06:34:01.083Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;搞懂异地多活，看这篇就够了&quot;&gt;&lt;a href=&quot;#搞懂异地多活，看这篇就够了&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="架构" scheme="https://fyxemmmm.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="架构" scheme="https://fyxemmmm.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="异地多活" scheme="https://fyxemmmm.github.io/tags/%E5%BC%82%E5%9C%B0%E5%A4%9A%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>redis 性能优化</title>
    <link href="https://fyxemmmm.github.io/2021/11/01/redis-xing-neng-wen-ti-fen-xi/"/>
    <id>https://fyxemmmm.github.io/2021/11/01/redis-xing-neng-wen-ti-fen-xi/</id>
    <published>2021-11-01T11:49:06.000Z</published>
    <updated>2021-11-14T06:18:20.108Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Redis慢的原因-amp-redis性能优化&quot;&gt;&lt;a href=&quot;#Redis慢的原因-amp-redis性能优化&quot; class=&quot;headerlink&quot; title=&quot;Redis慢的原因 &amp;amp; redis性能优化&quot;&gt;&lt;/a&gt;Redis慢的原因</summary>
        
      
    
    
    
    <category term="redis" scheme="https://fyxemmmm.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://fyxemmmm.github.io/tags/redis/"/>
    
    <category term="性能优化" scheme="https://fyxemmmm.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>limit &amp; offset 为什么会慢</title>
    <link href="https://fyxemmmm.github.io/2021/10/19/mysql-fen-ye-cha-xun/"/>
    <id>https://fyxemmmm.github.io/2021/10/19/mysql-fen-ye-cha-xun/</id>
    <published>2021-10-19T11:49:06.000Z</published>
    <updated>2021-10-20T05:58:20.029Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;从一个问题说起&quot;&gt;&lt;a href=&quot;#从一个问题说起&quot; class=&quot;headerlink&quot; title=&quot;从一个问题说起&quot;&gt;&lt;/a&gt;从一个问题说起&lt;/h2&gt;&lt;p&gt;五年前发现分页场景下，mysql请求速度非常慢。数据量只有10w的情况下，select xx</summary>
        
      
    
    
    
    <category term="mysql" scheme="https://fyxemmmm.github.io/categories/mysql/"/>
    
    
    <category term="limit" scheme="https://fyxemmmm.github.io/tags/limit/"/>
    
    <category term="offset" scheme="https://fyxemmmm.github.io/tags/offset/"/>
    
    <category term="分页" scheme="https://fyxemmmm.github.io/tags/%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>简单说说「跨域请求」</title>
    <link href="https://fyxemmmm.github.io/2021/10/14/cors/"/>
    <id>https://fyxemmmm.github.io/2021/10/14/cors/</id>
    <published>2021-10-14T09:48:27.000Z</published>
    <updated>2021-10-20T05:58:36.656Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;“前端如何解决跨域问题？” 这个是前段在知乎看到的一个提问，这几乎是做前端都会遇到的一个问题，产生的情况可能会很多，解决一个问题还是要先了解下为什么会产生这样问题，学习最好的方法就是结合一些实际的案例来学习，理解和掌握也会更加的深刻，本文结合 Node.js 写一些</summary>
        
      
    
    
    
    <category term="协议" scheme="https://fyxemmmm.github.io/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="http" scheme="https://fyxemmmm.github.io/tags/http/"/>
    
    <category term="cors" scheme="https://fyxemmmm.github.io/tags/cors/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes nfs-provider</title>
    <link href="https://fyxemmmm.github.io/2021/10/09/k8s-nfs-provider/"/>
    <id>https://fyxemmmm.github.io/2021/10/09/k8s-nfs-provider/</id>
    <published>2021-10-09T09:38:26.000Z</published>
    <updated>2021-10-23T08:08:56.488Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;一、什么是StorageClass&quot;&gt;&lt;a href=&quot;#一、什么是StorageClass&quot; class=&quot;headerlink&quot; title=&quot;一、什么是StorageClass&quot;&gt;&lt;/a&gt;一、什么是StorageClass&lt;/h3&gt;&lt;pre</summary>
        
      
    
    
    
    <category term="kubernetes" scheme="https://fyxemmmm.github.io/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://fyxemmmm.github.io/tags/kubernetes/"/>
    
    <category term="StorageClass" scheme="https://fyxemmmm.github.io/tags/StorageClass/"/>
    
  </entry>
  
  <entry>
    <title>golang pprof 实操</title>
    <link href="https://fyxemmmm.github.io/2021/10/03/pprof/"/>
    <id>https://fyxemmmm.github.io/2021/10/03/pprof/</id>
    <published>2021-10-03T14:24:01.000Z</published>
    <updated>2021-10-03T14:36:58.423Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;pprof是一个好工具，但掌握好工具的正确用法，才能发挥好工具的威力，不然就算你手里有屠龙刀，也成不了天下第一，本文就是带你用pprof定位内存泄露问题。&lt;/p&gt;
&lt;p&gt;关于Go的内存泄露有这么一句话不知道你听过没有：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;10次内存泄露</summary>
        
      
    
    
    
    <category term="golang" scheme="https://fyxemmmm.github.io/categories/golang/"/>
    
    
    <category term="pprof" scheme="https://fyxemmmm.github.io/tags/pprof/"/>
    
    <category term="性能诊断" scheme="https://fyxemmmm.github.io/tags/%E6%80%A7%E8%83%BD%E8%AF%8A%E6%96%AD/"/>
    
  </entry>
  
</feed>
